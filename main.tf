# Configure the VMware vCloud Director Provider
provider "vcd" {
  user     = var.vcd_user
  password = var.vcd_password
  org      = var.vcd_org
  url      = var.vcd_url
  vdc      = var.vdc_name
}

# Used to obtain information from the already deployed Edge Gateway
module ibm_vmware_solutions_shared_instance {
  source = "./modules/ibm-vmware-solutions-shared-instance/"

  vdc_edge_gateway_name = var.vdc_edge_gateway_name
}

# Create a routed network
resource "vcd_network_routed" "tutorial_network" {

  name         = "Tutorial-Network"
  edge_gateway = module.ibm_vmware_solutions_shared_instance.edge_gateway_name
  gateway      = "192.168.100.1"

  interface_type = "distributed"

  static_ip_pool {
    start_address = "192.168.100.5"
    end_address   = "192.168.100.254"
  }

  dns1 = "9.9.9.9"
  dns2 = "1.1.1.1"
}

# Create the firewall rule to access the Internet 
resource "vcd_nsxv_firewall_rule" "rule_internet" {
  edge_gateway = module.ibm_vmware_solutions_shared_instance.edge_gateway_name
  name         = "${vcd_network_routed.tutorial_network.name}-Internet"

  action = "accept"

  source {
    org_networks = [vcd_network_routed.tutorial_network.name]
  }

  destination {
    ip_addresses = []
  }

  service {
    protocol = "any"
  }
}

# Create SNAT rule to access the Internet
resource "vcd_nsxv_snat" "rule_internet" {
  edge_gateway = module.ibm_vmware_solutions_shared_instance.edge_gateway_name
  network_type = "ext"
  network_name = module.ibm_vmware_solutions_shared_instance.external_network_name_2

  original_address   = "${vcd_network_routed.tutorial_network.gateway}/24"
  translated_address = module.ibm_vmware_solutions_shared_instance.default_external_network_ip
}

# Create the firewall rule to allow SSH from the Internet
resource "vcd_nsxv_firewall_rule" "rule_internet_ssh" {
  count = tobool(var.allow_ssh) == true ? 1 :0

  edge_gateway = module.ibm_vmware_solutions_shared_instance.edge_gateway_name
  name         = "${vcd_network_routed.tutorial_network.name}-Internet-SSH"

  action = "accept"

  source {
    ip_addresses = []
  }

  destination {
    ip_addresses = [module.ibm_vmware_solutions_shared_instance.default_external_network_ip]
  }

  service {
    protocol = "tcp"
    port     = 22
  }
}

# Create DNAT rule to allow SSH from the Internet
resource "vcd_nsxv_dnat" "rule_internet_ssh" {
  count = tobool(var.allow_ssh) == true ? 1 :0

  edge_gateway = module.ibm_vmware_solutions_shared_instance.edge_gateway_name
  network_type = "ext"
  network_name = module.ibm_vmware_solutions_shared_instance.external_network_name_2

  original_address = module.ibm_vmware_solutions_shared_instance.default_external_network_ip
  original_port    = 22

  translated_address = vcd_vapp_vm.vm_1.network[0].ip
  translated_port    = 22
  protocol           = "tcp"
}

# Create the firewall to access IBM Cloud services over the IBM Cloud private network 
resource "vcd_nsxv_firewall_rule" "rule_ibm_private" {
  edge_gateway = module.ibm_vmware_solutions_shared_instance.edge_gateway_name
  name         = "${vcd_network_routed.tutorial_network.name}-IBM-Private"

  logging_enabled = "false"
  action          = "accept"

  source {
    org_networks = [vcd_network_routed.tutorial_network.name]
  }

  destination {
    gateway_interfaces = [module.ibm_vmware_solutions_shared_instance.external_network_name_1]
  }

  service {
    protocol = "any"
  }
}

# Create SNAT rule to access the IBM Cloud services over a private network
resource "vcd_nsxv_snat" "rule_ibm_private" {
  edge_gateway = module.ibm_vmware_solutions_shared_instance.edge_gateway_name
  network_type = "ext"
  network_name = module.ibm_vmware_solutions_shared_instance.external_network_name_1

  original_address   = "${vcd_network_routed.tutorial_network.gateway}/24"
  translated_address = module.ibm_vmware_solutions_shared_instance.external_network_ips_2
}

# Create vcd App
resource "vcd_vapp" "vmware_tutorial_vapp" {
  name = "vmware-tutorial-vApp"
}

# Connect org Network to vcpApp
resource "vcd_vapp_org_network" "tutorial_network" {
  vapp_name        = vcd_vapp.vmware_tutorial_vapp.name
  org_network_name = vcd_network_routed.tutorial_network.name
}
# Create VM
resource "vcd_vapp_vm" "vm_1" {
  vapp_name     = vcd_vapp.vmware_tutorial_vapp.name
  name          = "vm-rhcos-latest-test"
  catalog_name  = "Public Catalog" 
  template_name = "rhcos OpenShift 4.8.14"
  memory        = 16384
  cpus          = 4
  
  network {
    type               = "org"
    name               = vcd_vapp_org_network.tutorial_network.org_network_name
    ip_allocation_mode = "POOL"
    is_primary         = true
  }
  guest_properties = {
    "guestinfo.ignition.config.data"           = "ewogICJpZ25pdGlvbiI6IHsKICAgICJ2ZXJzaW9uIjogIjMuMS4wIgogIH0sCiAgInBhc3N3ZCI6IHsKICAgICJ1c2VycyI6IFsKICAgICAgewogICAgICAgICJuYW1lIjogImNvcmUiLAogICAgICAgICJwYXNzd29yZEhhc2giOiAiJDJhJDA0JDF3ZVFpTkFReE1WNEp1SnAwbmxoT3VtQUs0SzMvQ3pmYVdyTEVzZFkyVmZjVXNSd0JpNjdHIiwKICAgICAgICAic3NoQXV0aG9yaXplZEtleXMiOiBbICIiIF0KICAgICAgfQogICAgXQogIH0sCiAgInN0b3JhZ2UiOiB7CiAgICAiZmlsZXMiOiBbCiAgICAgIHsKICAgICAgICAicGF0aCI6ICIvZXRjL3N5c2NvbmZpZy9uZXR3b3JrLXNjcmlwdHMvaWZjZmctZW5zMTkyIiwKICAgICAgICAibW9kZSI6IDQyMCwKICAgICAgICAiY29udGVudHMiOiB7CiAgICAgICAgICAic291cmNlIjogImRhdGE6dGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxWRmxRUlQxRmRHaGxjbTVsZEFwT1FVMUZQU0psYm5NeE9USWlDa1JGVmtsRFJUMGlaVzV6TVRreUlncFBUa0pQVDFROWVXVnpDazVGVkVKUFQxUTllV1Z6Q2tKUFQxUlFVazlVVHoxdWIyNWxDa2xRUVVSRVVqMGlNVGt5TGpFMk9DNHhNREF1TlNJS1RrVlVUVUZUU3owaU1qVTFMakkxTlM0eU5UVXVNalF3SWdwSFFWUkZWMEZaUFNJeE9USXVNVFk0TGpFd01DNHhJZ3BFVGxNeFBTSTVMamt1T1M0NUlnPT0iCiAgICAgICAgfQogICAgICB9LAogICAgICB7CiAgICAgICAgInBhdGgiOiAiL2V0Yy9ob3N0bmFtZSIsCiAgICAgICAgIm1vZGUiOiA0MjAsCiAgICAgICAgImNvbnRlbnRzIjogewogICAgICAgICAgInNvdXJjZSI6ICJkYXRhOnRleHQvcGxhaW47Y2hhcnNldD11dGYtODtiYXNlNjQsYldGemRHVnlNQzV2WTNBMExtVjRZVzF3YkdVdVkyOXRDZz09IgogICAgICAgIH0KICAgICAgfSwKICAgICAgewogICAgICAgICJvdmVyd3JpdGUiOiB0cnVlLAogICAgICAgICJwYXRoIjogIi91c3IvbG9jYWwvYmluL2libS1ob3N0LWF0dGFjaC5zaCIsCiAgICAgICAgImNvbnRlbnRzIjogewogICAgICAgICAgInNvdXJjZSI6ICJkYXRhOnRleHQvcGxhaW47YmFzZTY0LEl5RXZkWE55TDJKcGJpOWxibllnWW1GemFBcHpaWFFnTFdWNENtMXJaR2x5SUMxd0lDOWxkR012YzJGMFpXeHNhWFJsWm14aFozTUtTRTlUVkY5QlUxTkpSMDVmUmt4QlJ6MGlMMlYwWXk5ellYUmxiR3hwZEdWbWJHRm5jeTlvYjNOMFlYUjBZV05vWm14aFp5SUthV1lnVzFzZ0xXWWdJaVJJVDFOVVgwRlRVMGxIVGw5R1RFRkhJaUJkWFRzZ2RHaGxiZ29nSUNBZ1pXTm9ieUFpYUc5emRDQm9ZWE1nWVd4eVpXRmtlU0JpWldWdUlHRnpjMmxuYm1Wa0xpQnVaV1ZrSUhSdklISmxiRzloWkNCaVpXWnZjbVVnZVc5MUlIUnllU0IwYUdVZ1lYUjBZV05vSUdGbllXbHVJZ29nSUNBZ1pYaHBkQ0F3Q21acENuTmxkQ0FyZUFwSVQxTlVYMUZWUlZWRlgxUlBTMFZPUFNJMllqUXdPREJsTnpFd1lXTXhPV1V4Tm1WaE1EUmpNekEzTmprek4yRmtZV1V5TURKbE5ETmlZbUpsTVRFME5UQmlZemhsWkRjME9EZ3pNV05tWkRZeU5UQXhaamxsWkdFNFl6RTBPVGd6TlRka01qSTJOV1poTnpFeVlUZzNNMkl6T0dGbU9XTTRaamsyWWpFM09UaGhZVEUxTldJM1lXRmlaRFEwTWpWalltVTNNV05pT1dFeVltRmtaR001TmpBeE0yTTFOR1F4TXpNeU9UbGpOemRsTVdJNFpURmtZVGN4WVRJME5XWTJOekJoWldWalkySXpOR1JrTkRsaVlUbGpOemxqWldJMVlqazVOekV6T1RjNVpEZGtZamM0T1RZeFpEWTFZamt5WTJNMU1tTTFPR1JsWmpVM05ESTBNRFUwT1RNM1kyRTNZV1JqTmpJNE5tSTFOR0l3WlRobFlqaGlOR0k1WTJRNU9UazVZelF3TVRNellUZ3pOR00yWVRKak9UWmpabVZtWmpjNU5UQmtZekJoWldGak1XSTBOR1ptTWpJeVpqbGhObVkyWVdVd056RXpNREJsWmpjd1pUY3hPREV6WWprMVpqRTBZbVE1TnpCa01HTXhPV1kzT1dZNVpUSTFPR1UzWWpaa016ZzJOak0xWXpSbVptWmhPRFZpWlRjelpEbGlNVFZqWlRVeU5UUTBOakUxWm1NNVlqQTJaV1F3TmpnMVpqaGpaV0k0Tm1Fek1tWXpNakV5TTJSaFptUmlZakkzWkRCbFlXUmpaV1ZtWXpsaE16azRaV1JtTnpVek5XRmlaakJrTjJWbVpUbGtPVFptT1dZNU0yWTJOVFEyTjJJek5qVXhOVEV5T0RFMU0yTTJOemc0WkdWallUY3dNRE15WkNJS2MyVjBJQzE0Q2tGRFEwOVZUbFJmU1VROUltUmxNbU0wTURKak9EZ3dZelExTjJSaFlUZzBZbU15TUdRM1l6aGhNR0l6SWdwRFQwNVVVazlNVEVWU1gwbEVQU0pqT0RWck9EQm5NVEJ2ZERadE5EUndjRzVyTUNJS1FWQkpYMVZTVEQwaWFIUjBjSE02THk5dmNtbG5hVzR1WTI5dWRHRnBibVZ5Y3k1d2NtVjBaWE4wTG1Oc2IzVmtMbWxpYlM1amIyMHZZbTl2ZEhOMGNtRndJZ3BCVUVsZlZFVk5VRjlWVWt3OUpDaGxZMmh2SUNJa1FWQkpYMVZTVENJZ2ZDQmhkMnNnTFVaaWIyOTBjM1J5WVhBZ0ozdHdjbWx1ZENBa01YMG5LUXBTUlVkSlQwNDlJblZ6TFhOdmRYUm9JZ29LWlhod2IzSjBJRWhQVTFSZlVWVkZWVVZmVkU5TFJVNEtaWGh3YjNKMElFRkRRMDlWVGxSZlNVUUtaWGh3YjNKMElFTlBUbFJTVDB4TVJWSmZTVVFLWlhod2IzSjBJRkpGUjBsUFRnb2pjMmgxZEdSdmQyNGdhMjV2ZDI0Z1lteGhZMnRzYVhOMFpXUWdjMlZ5ZG1salpYTWdabTl5SUZOaGRHVnNiR2wwWlNBb2RHaGxjMlVnZDJsc2JDQmljbVZoYXlCcmRXSmxLUXB6WlhRZ0syVUtjM2x6ZEdWdFkzUnNJSE4wYjNBZ0xXWWdhWEIwWVdKc1pYTXVjMlZ5ZG1salpRcHplWE4wWlcxamRHd2daR2x6WVdKc1pTQnBjSFJoWW14bGN5NXpaWEoyYVdObENuTjVjM1JsYldOMGJDQnRZWE5ySUdsd2RHRmliR1Z6TG5ObGNuWnBZMlVLYzNsemRHVnRZM1JzSUhOMGIzQWdMV1lnWm1seVpYZGhiR3hrTG5ObGNuWnBZMlVLYzNsemRHVnRZM1JzSUdScGMyRmliR1VnWm1seVpYZGhiR3hrTG5ObGNuWnBZMlVLYzNsemRHVnRZM1JzSUcxaGMyc2dabWx5WlhkaGJHeGtMbk5sY25acFkyVUtjMlYwSUMxbENtMXJaR2x5SUMxd0lDOWxkR012YzJGMFpXeHNhWFJsYldGamFHbHVaV2xrWjJWdVpYSmhkR2x2YmdwcFppQmJXeUFoSUMxbUlDOWxkR012YzJGMFpXeHNhWFJsYldGamFHbHVaV2xrWjJWdVpYSmhkR2x2Ymk5dFlXTm9hVzVsYVdSblpXNWxjbUYwWldRZ1hWMDdJSFJvWlc0S0lDQWdJSEp0SUMxbUlDOWxkR012YldGamFHbHVaUzFwWkFvZ0lDQWdjM2x6ZEdWdFpDMXRZV05vYVc1bExXbGtMWE5sZEhWd0NpQWdJQ0IwYjNWamFDQXZaWFJqTDNOaGRHVnNiR2wwWlcxaFkyaHBibVZwWkdkbGJtVnlZWFJwYjI0dmJXRmphR2x1Wldsa1oyVnVaWEpoZEdWa0NtWnBDaU5UVkVWUUlERTZJRWRCVkVoRlVpQkpUa1pQVWsxQlZFbFBUaUJVU0VGVUlGZEpURXdnUWtVZ1ZWTkZSQ0JVVHlCU1JVZEpVMVJGVWlCVVNFVWdTRTlUVkFwTlFVTklTVTVGWDBsRVBTUW9ZMkYwSUM5bGRHTXZiV0ZqYUdsdVpTMXBaQ2tLUTFCVlV6MGtLRzV3Y205aktRcE5SVTFQVWxrOUpDaG5jbVZ3SUUxbGJWUnZkR0ZzSUM5d2NtOWpMMjFsYldsdVptOGdmQ0JoZDJzZ0ozdHdjbWx1ZENBa01uMG5LUXBJVDFOVVRrRk5SVDBrS0dodmMzUnVZVzFsSUMxektRcElUMU5VVGtGTlJUMGtlMGhQVTFST1FVMUZMQ3g5Q21WNGNHOXlkQ0JEVUZWVENtVjRjRzl5ZENCTlJVMVBVbGtLQ25ObGRDQXJaUXBwWmlCbmNtVndJQzF4YVNBaVkyOXlaVzl6SWlBOElDOWxkR012Y21Wa2FHRjBMWEpsYkdWaGMyVTdJSFJvWlc0S0lDQlBVRVZTUVZSSlRrZGZVMWxUVkVWTlBTSlNTRU5QVXlJS1pXeHBaaUJuY21Wd0lDMXhhU0FpYldGcGNHOGlJRHdnTDJWMFl5OXlaV1JvWVhRdGNtVnNaV0Z6WlRzZ2RHaGxiZ29nSUU5UVJWSkJWRWxPUjE5VFdWTlVSVTA5SWxKSVJVdzNJZ3BsYkdsbUlHZHlaWEFnTFhGcElDSnZiM1J3WVNJZ1BDQXZaWFJqTDNKbFpHaGhkQzF5Wld4bFlYTmxPeUIwYUdWdUNpQWdUMUJGVWtGVVNVNUhYMU5aVTFSRlRUMGlVa2hGVERnaUNtVnNjMlVLSUNCbFkyaHZJQ0pQY0dWeVlYUnBibWNnVTNsemRHVnRJRzV2ZENCemRYQndiM0owWldRaUNpQWdUMUJGVWtGVVNVNUhYMU5aVTFSRlRUMGlWVTVMVGs5WFRpSUtabWtLYzJWMElDMWxDZ3BsZUhCdmNuUWdUMUJGVWtGVVNVNUhYMU5aVTFSRlRRb0thV1lnVzFzZ0lpUjdUMUJGVWtGVVNVNUhYMU5aVTFSRlRYMGlJQ0U5SUNKU1NFTlBVeUlnWFYwN0lIUm9aVzRLSUNCbFkyaHZJQ0pVYUdseklITmpjbWx3ZENCcGN5QnZibXg1SUdsdWRHVnVaR1ZrSUhSdklISjFiaUIzYVhSb0lHRnVJRkpJUTA5VElHOXdaWEpoZEdsdVp5QnplWE4wWlcwdUlFTjFjbkpsYm5RZ2IzQmxjbUYwYVc1bklITjVjM1JsYlNBa2UwOVFSVkpCVkVsT1IxOVRXVk5VUlUxOUlnb2dJR1Y0YVhRZ01RcG1hUW9LVTBWTVJVTlVUMUpmVEVGQ1JVeFRQU1FvYW5FZ0xXNGdMUzFoY21jZ1ExQlZVeUFpSkVOUVZWTWlJQzB0WVhKbklFMUZUVTlTV1NBaUpFMUZUVTlTV1NJZ0xTMWhjbWNnVDFCRlVrRlVTVTVIWDFOWlUxUkZUU0FpSkU5UVJWSkJWRWxPUjE5VFdWTlVSVTBpSUNkN0NpQWdZM0IxT2lBa1ExQlZVeXdLSUNCdFpXMXZjbms2SUNSTlJVMVBVbGtzQ2lBZ2IzTTZJQ1JQVUVWU1FWUkpUa2RmVTFsVFZFVk5DbjBuS1FwelpYUWdLMlVLWlhod2IzSjBJRnBQVGtVOUlpSUtaV05vYnlBaVVISnZZbWx1WnlCbWIzSWdRVmRUSUcxbGRHRmtZWFJoSWdwbllYUm9aWEpmZW05dVpWOXBibVp2S0NrZ2V3b2dJQ0FnU0ZSVVVGOVNSVk5RVDA1VFJUMGtLR04xY213Z0xTMTNjbWwwWlMxdmRYUWdJa2hVVkZCVFZFRlVWVk02Slh0b2RIUndYMk52WkdWOUlpQXRMVzFoZUMxMGFXMWxJREV3SUdoMGRIQTZMeTh4TmprdU1qVTBMakUyT1M0eU5UUXZiR0YwWlhOMEwyMWxkR0V0WkdGMFlTOXdiR0ZqWlcxbGJuUXZZWFpoYVd4aFltbHNhWFI1TFhwdmJtVXBDaUFnSUNCSVZGUlFYMU5VUVZSVlV6MGtLR1ZqYUc4Z0lpUklWRlJRWDFKRlUxQlBUbE5GSWlCOElIUnlJQzFrSUNkY2JpY2dmQ0JoZDJzZ0xVWTZJQ2N2TGlwSVZGUlFVMVJCVkZWVE9paGJNQzA1WFhzemZTa2tMeUI3SUhCeWFXNTBJQ1F5SUgwbktRb2dJQ0FnU0ZSVVVGOUNUMFJaUFNRb1pXTm9ieUFpSkVoVVZGQmZVa1ZUVUU5T1UwVWlJSHdnYzJWa0lDMUZJQ2R6TDBoVVZGQlRWRUZVVlZOY09sc3dMVGxkZXpOOUpDOHZKeWtLSUNBZ0lHbG1JRnRiSUNJa1NGUlVVRjlUVkVGVVZWTWlJQzF1WlNBeU1EQWdYVjA3SUhSb1pXNEtJQ0FnSUNBZ0lDQmxZMmh2SUNKaVlXUWdjbVYwZFhKdUlHTnZaR1VpQ2lBZ0lDQWdJQ0FnY21WMGRYSnVJREVLSUNBZ0lHWnBDaUFnSUNCcFppQmJXeUFpSkVoVVZGQmZRazlFV1NJZ1BYNGdXMTVoTFhwQkxWb3dMVGt0WFNCZFhUc2dkR2hsYmdvZ0lDQWdJQ0FnSUdWamFHOGdJbWx1ZG1Gc2FXUWdlbTl1WlNCbWIzSnRZWFFpQ2lBZ0lDQWdJQ0FnY21WMGRYSnVJREVLSUNBZ0lHWnBDaUFnSUNCYVQwNUZQU0lrU0ZSVVVGOUNUMFJaSWdwOUNtbG1JR2RoZEdobGNsOTZiMjVsWDJsdVptODdJSFJvWlc0S0lDQWdJR1ZqYUc4Z0ltRjNjeUJ0WlhSaFpHRjBZU0JrWlhSbFkzUmxaQ0lLWm1rS2FXWWdXMXNnTFhvZ0lpUmFUMDVGSWlCZFhUc2dkR2hsYmdvZ0lDQWdaV05vYnlBaVpXTm9ieUJRY205aWFXNW5JR1p2Y2lCQmVuVnlaU0JOWlhSaFpHRjBZU0lLSUNBZ0lHVjRjRzl5ZENCTVQwTkJWRWxQVGw5SlRrWlBQU0lpQ2lBZ0lDQmxlSEJ2Y25RZ1FWcFZVa1ZmV2s5T1JWOU9WVTFDUlZKZlNVNUdUejBpSWdvZ0lDQWdaMkYwYUdWeVgyeHZZMkYwYVc5dVgybHVabThvS1NCN0NpQWdJQ0FnSUNBZ1NGUlVVRjlTUlZOUVQwNVRSVDBrS0dOMWNtd2dMVWdnVFdWMFlXUmhkR0U2ZEhKMVpTQXRMVzV2Y0hKdmVIa2dJaW9pSUMwdGQzSnBkR1V0YjNWMElDSklWRlJRVTFSQlZGVlRPaVY3YUhSMGNGOWpiMlJsZlNJZ0xTMXRZWGd0ZEdsdFpTQXhNQ0FpYUhSMGNEb3ZMekUyT1M0eU5UUXVNVFk1TGpJMU5DOXRaWFJoWkdGMFlTOXBibk4wWVc1alpTOWpiMjF3ZFhSbEwyeHZZMkYwYVc5dVAyRndhUzEyWlhKemFXOXVQVEl3TWpFdE1ERXRNREVtWm05eWJXRjBQWFJsZUhRaUtRb2dJQ0FnSUNBZ0lFaFVWRkJmVTFSQlZGVlRQU1FvWldOb2J5QWlKRWhVVkZCZlVrVlRVRTlPVTBVaUlId2dkSElnTFdRZ0oxeHVKeUI4SUdGM2F5QXRSam9nSnk4dUtraFVWRkJUVkVGVVZWTTZLRnN3TFRsZGV6TjlLU1F2SUhzZ2NISnBiblFnSkRJZ2ZTY3BDaUFnSUNBZ0lDQWdTRlJVVUY5Q1QwUlpQU1FvWldOb2J5QWlKRWhVVkZCZlVrVlRVRTlPVTBVaUlId2djMlZrSUMxRklDZHpMMGhVVkZCVFZFRlVWVk5jT2xzd0xUbGRlek45SkM4dkp5a0tJQ0FnSUNBZ0lDQnBaaUJiV3lBaUpFaFVWRkJmVTFSQlZGVlRJaUF0Ym1VZ01qQXdJRjFkT3lCMGFHVnVDaUFnSUNBZ0lDQWdJQ0FnSUdWamFHOGdJbUpoWkNCeVpYUjFjbTRnWTI5a1pTSUtJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJREVLSUNBZ0lDQWdJQ0JtYVFvZ0lDQWdJQ0FnSUdsbUlGdGJJQ0lrU0ZSVVVGOUNUMFJaSWlBOWZpQmJYbUV0ZWtFdFdqQXRPUzFkSUYxZE95QjBhR1Z1Q2lBZ0lDQWdJQ0FnSUNBZ0lHVmphRzhnSW1sdWRtRnNhV1FnWm05eWJXRjBJZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTVFvZ0lDQWdJQ0FnSUdacENpQWdJQ0FnSUNBZ1RFOURRVlJKVDA1ZlNVNUdUejBpSkVoVVZGQmZRazlFV1NJS0lDQWdJSDBLSUNBZ0lHZGhkR2hsY2w5aGVuVnlaVjk2YjI1bFgyNTFiV0psY2w5cGJtWnZLQ2tnZXdvZ0lDQWdJQ0FnSUVoVVZGQmZVa1ZUVUU5T1UwVTlKQ2hqZFhKc0lDMUlJRTFsZEdGa1lYUmhPblJ5ZFdVZ0xTMXViM0J5YjNoNUlDSXFJaUF0TFhkeWFYUmxMVzkxZENBaVNGUlVVRk5VUVZSVlV6b2xlMmgwZEhCZlkyOWtaWDBpSUMwdGJXRjRMWFJwYldVZ01UQWdJbWgwZEhBNkx5OHhOamt1TWpVMExqRTJPUzR5TlRRdmJXVjBZV1JoZEdFdmFXNXpkR0Z1WTJVdlkyOXRjSFYwWlM5NmIyNWxQMkZ3YVMxMlpYSnphVzl1UFRJd01qRXRNREV0TURFbVptOXliV0YwUFhSbGVIUWlLUW9nSUNBZ0lDQWdJRWhVVkZCZlUxUkJWRlZUUFNRb1pXTm9ieUFpSkVoVVZGQmZVa1ZUVUU5T1UwVWlJSHdnZEhJZ0xXUWdKMXh1SnlCOElITmxaQ0F0UlNBbmN5OHVLa2hVVkZCVFZFRlVWVk02S0Zzd0xUbGRlek45S1NRdlhERXZKeWtLSUNBZ0lDQWdJQ0JJVkZSUVgwSlBSRms5SkNobFkyaHZJQ0lrU0ZSVVVGOVNSVk5RVDA1VFJTSWdmQ0J6WldRZ0xVVWdKM012U0ZSVVVGTlVRVlJWVTF3Nld6QXRPVjE3TTMwa0x5OG5LUW9nSUNBZ0lDQWdJR2xtSUZ0YklDSWtTRlJVVUY5VFZFRlVWVk1pSUMxdVpTQXlNREFnWFYwN0lIUm9aVzRLSUNBZ0lDQWdJQ0FnSUNBZ1pXTm9ieUFpWW1Ga0lISmxkSFZ5YmlCamIyUmxJZ29nSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTVFvZ0lDQWdJQ0FnSUdacENpQWdJQ0FnSUNBZ2FXWWdXMXNnSWlSSVZGUlFYMEpQUkZraUlEMStJRnRlWVMxNlFTMWFNQzA1TFYwZ1hWMDdJSFJvWlc0S0lDQWdJQ0FnSUNBZ0lDQWdaV05vYnlBaWFXNTJZV3hwWkNCbWIzSnRZWFFpQ2lBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBeENpQWdJQ0FnSUNBZ1pta0tJQ0FnSUNBZ0lDQkJXbFZTUlY5YVQwNUZYMDVWVFVKRlVsOUpUa1pQUFNJa1NGUlVVRjlDVDBSWklnb2dJQ0FnZlFvZ0lDQWdaMkYwYUdWeVgzcHZibVZmYVc1bWJ5Z3BJSHNLSUNBZ0lDQWdJQ0JwWmlBaElHZGhkR2hsY2w5c2IyTmhkR2x2Ymw5cGJtWnZPeUIwYUdWdUNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQXhDaUFnSUNBZ0lDQWdabWtLSUNBZ0lDQWdJQ0JwWmlBaElHZGhkR2hsY2w5aGVuVnlaVjk2YjI1bFgyNTFiV0psY2w5cGJtWnZPeUIwYUdWdUNpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQXhDaUFnSUNBZ0lDQWdabWtLSUNBZ0lDQWdJQ0JwWmlCYld5QXRiaUFpSkVGYVZWSkZYMXBQVGtWZlRsVk5Ra1ZTWDBsT1JrOGlJRjFkT3lCMGFHVnVDaUFnSUNBZ0lDQWdJQ0JhVDA1RlBTSWtlMHhQUTBGVVNVOU9YMGxPUms5OUxTUjdRVnBWVWtWZldrOU9SVjlPVlUxQ1JWSmZTVTVHVDMwaUNpQWdJQ0FnSUNBZ1pXeHpaUW9nSUNBZ0lDQWdJQ0FnV2s5T1JUMGlKSHRNVDBOQlZFbFBUbDlKVGtaUGZTSUtJQ0FnSUNBZ0lDQm1hUW9nSUNBZ2ZRb2dJQ0FnYVdZZ1oyRjBhR1Z5WDNwdmJtVmZhVzVtYnpzZ2RHaGxiZ29nSUNBZ0lDQWdJR1ZqYUc4Z0ltRjZkWEpsSUcxbGRHRmtZWFJoSUdSbGRHVmpkR1ZrSWdvZ0lDQWdabWtLWm1rS2FXWWdXMXNnTFhvZ0lpUmFUMDVGSWlCZFhUc2dkR2hsYmdvZ0lDQWdaV05vYnlBaVpXTm9ieUJRY205aWFXNW5JR1p2Y2lCSFEwVWdUV1YwWVdSaGRHRWlDaUFnSUNCbllYUm9aWEpmZW05dVpWOXBibVp2S0NrZ2V3b2dJQ0FnSUNBZ0lFaFVWRkJmVWtWVFVFOU9VMFU5SkNoamRYSnNJQzB0ZDNKcGRHVXRiM1YwSUNKSVZGUlFVMVJCVkZWVE9pVjdhSFIwY0Y5amIyUmxmU0lnTFMxdFlYZ3RkR2x0WlNBeE1DQWlhSFIwY0RvdkwyMWxkR0ZrWVhSaExtZHZiMmRzWlM1cGJuUmxjbTVoYkM5amIyMXdkWFJsVFdWMFlXUmhkR0V2ZGpFdmFXNXpkR0Z1WTJVdmVtOXVaU0lnTFVnZ0lrMWxkR0ZrWVhSaExVWnNZWFp2Y2pvZ1IyOXZaMnhsSWlrS0lDQWdJQ0FnSUNCSVZGUlFYMU5VUVZSVlV6MGtLR1ZqYUc4Z0lpUklWRlJRWDFKRlUxQlBUbE5GSWlCOElIUnlJQzFrSUNkY2JpY2dmQ0J6WldRZ0xVVWdKM012TGlwSVZGUlFVMVJCVkZWVE9paGJNQzA1WFhzemZTa2tMMXd4THljcENpQWdJQ0FnSUNBZ1NGUlVVRjlDVDBSWlBTUW9aV05vYnlBaUpFaFVWRkJmVWtWVFVFOU9VMFVpSUh3Z2MyVmtJQzFGSUNkekwwaFVWRkJUVkVGVVZWTmNPbHN3TFRsZGV6TjlKQzh2SnlrS0lDQWdJQ0FnSUNCcFppQmJXeUFpSkVoVVZGQmZVMVJCVkZWVElpQXRibVVnTWpBd0lGMWRPeUIwYUdWdUNpQWdJQ0FnSUNBZ0lDQWdJR1ZqYUc4Z0ltSmhaQ0J5WlhSMWNtNGdZMjlrWlNJS0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlERUtJQ0FnSUNBZ0lDQm1hUW9nSUNBZ0lDQWdJRkJQVkVWT1ZFbEJURjlhVDA1RlgxSkZVMUJQVGxORlBTUW9aV05vYnlBaUpFaFVWRkJmUWs5RVdTSWdmQ0JoZDJzZ0xVWWdKeThuSUNkN2NISnBiblFnSkU1R2ZTY3BDaUFnSUNBZ0lDQWdhV1lnVzFzZ0lpUlFUMVJGVGxSSlFVeGZXazlPUlY5U1JWTlFUMDVUUlNJZ1BYNGdXMTVoTFhwQkxWb3dMVGt0WFNCZFhUc2dkR2hsYmdvZ0lDQWdJQ0FnSUNBZ0lDQmxZMmh2SUNKcGJuWmhiR2xrSUhwdmJtVWdabTl5YldGMElnb2dJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdNUW9nSUNBZ0lDQWdJR1pwQ2lBZ0lDQWdJQ0FnV2s5T1JUMGlKRkJQVkVWT1ZFbEJURjlhVDA1RlgxSkZVMUJQVGxORklnb2dJQ0FnZlFvZ0lDQWdhV1lnWjJGMGFHVnlYM3B2Ym1WZmFXNW1ienNnZEdobGJnb2dJQ0FnSUNBZ0lHVmphRzhnSW1kalpTQnRaWFJoWkdGMFlTQmtaWFJsWTNSbFpDSUtJQ0FnSUdacENtWnBDbk5sZENBdFpRcHBaaUJiV3lBdGJpQWlKRnBQVGtVaUlGMWRPeUIwYUdWdUNpQWdVMFZNUlVOVVQxSmZURUZDUlV4VFBTUW9hbkVnTFc0Z0xTMWhjbWNnUTFCVlV5QWlKRU5RVlZNaUlDMHRZWEpuSUUxRlRVOVNXU0FpSkUxRlRVOVNXU0lnTFMxaGNtY2dUMUJGVWtGVVNVNUhYMU5aVTFSRlRTQWlKRTlRUlZKQlZFbE9SMTlUV1ZOVVJVMGlJQzB0WVhKbklGcFBUa1VnSWlSYVQwNUZJaUFuZXdvZ0lHTndkVG9nSkVOUVZWTXNDaUFnYldWdGIzSjVPaUFrVFVWTlQxSlpMQW9nSUc5ek9pQWtUMUJGVWtGVVNVNUhYMU5aVTFSRlRTd0tJQ0I2YjI1bE9pQWtXazlPUlFwOUp5a0tabWtLWldOb2J5QWlKSHRUUlV4RlExUlBVbDlNUVVKRlRGTjlJaUErSUM5MGJYQXZaR1YwWldOMFpXUnpaV3hsWTNSdmNteGhZbVZzY3dvS2FXWWdXeUF0WmlBaUwzUnRjQzl3Y205MmFXUmxaSE5sYkdWamRHOXliR0ZpWld4eklpQmRPeUIwYUdWdUNpQWdVMFZNUlVOVVQxSmZURUZDUlV4VFBTSWtLR3B4SUMxeklDY3VXekJkSUNvZ0xsc3hYU2NnTDNSdGNDOWtaWFJsWTNSbFpITmxiR1ZqZEc5eWJHRmlaV3h6SUM5MGJYQXZjSEp2ZG1sa1pXUnpaV3hsWTNSdmNteGhZbVZzY3lraUNtVnNjMlVLSUNCVFJVeEZRMVJQVWw5TVFVSkZURk05SkNocWNTQXVJQzkwYlhBdlpHVjBaV04wWldSelpXeGxZM1J2Y214aFltVnNjeWtLWm1rS0NpTlRkR1Z3SURJNklGTkZWRlZRSUUxRlZFRkVRVlJCQ21OaGRDQThQRVZQUmlBK0wzUnRjQzl5WldkcGMzUmxjaTVxYzI5dUNuc0tJbU52Ym5SeWIyeHNaWElpT2lBaUpFTlBUbFJTVDB4TVJWSmZTVVFpTEFvaWJtRnRaU0k2SUNJa1NFOVRWRTVCVFVVaUxBb2lhV1JsYm5ScFptbGxjaUk2SUNJa1RVRkRTRWxPUlY5SlJDSXNDaUpzWVdKbGJITWlPaUFrVTBWTVJVTlVUMUpmVEVGQ1JVeFRDbjBLUlU5R0NuTmxkQ0FyWlFvamRISjVJSFJ2SUdSdmQyNXNiMkZrSUdGdVpDQnlkVzRnYUc5emRDQm9aV0ZzZEdnZ1kyaGxZMnNnYzJOeWFYQjBDbk5sZENBcmVBb2pabWx5YzNRZ2RISjVJSFJ2SUhSb1pTQnpZWFJsYkd4cGRHVXRhR1ZoYkhSb0lITmxjblpwWTJVZ2FYTWdaVzVoWW14bFpBcElWRlJRWDFKRlUxQlBUbE5GUFNRb1kzVnliQ0F0TFhkeWFYUmxMVzkxZENBaVNGUlVVRk5VUVZSVlV6b2xlMmgwZEhCZlkyOWtaWDBpSUMwdGNtVjBjbmtnTlNBdExYSmxkSEo1TFdSbGJHRjVJREV3SUMwdGNtVjBjbmt0YldGNExYUnBiV1VnTmpBZ1hBb2dJQ0FnSUNBZ0lDSWtlMEZRU1Y5VlVreDljMkYwWld4c2FYUmxMV2hsWVd4MGFDOWhjR2t2ZGpFdmFHVnNiRzhpS1FwelpYUWdMWGdLU0ZSVVVGOUNUMFJaUFNRb1pXTm9ieUFpSkVoVVZGQmZVa1ZUVUU5T1UwVWlJSHdnYzJWa0lDMUZJQ2R6TDBoVVZGQlRWRUZVVlZOY09sc3dMVGxkZXpOOUpDOHZKeWtLU0ZSVVVGOVRWRUZVVlZNOUpDaGxZMmh2SUNJa1NGUlVVRjlTUlZOUVQwNVRSU0lnZkNCMGNpQXRaQ0FuWEc0bklId2djMlZrSUMxRklDZHpMeTRxU0ZSVVVGTlVRVlJWVXpvb1d6QXRPVjE3TTMwcEpDOWNNUzhuS1FwbFkyaHZJQ0lrU0ZSVVVGOVRWRUZVVlZNaUNtbG1JRnRiSUNJa1NGUlVVRjlUVkVGVVZWTWlJQzFsY1NBeU1EQWdYVjA3SUhSb1pXNEtJQ0FnSUNBZ0lDQnpaWFFnSzNnS0lDQWdJQ0FnSUNCSVZGUlFYMUpGVTFCUFRsTkZQU1FvWTNWeWJDQXRMWGR5YVhSbExXOTFkQ0FpU0ZSVVVGTlVRVlJWVXpvbGUyaDBkSEJmWTI5a1pYMGlJQzB0Y21WMGNua2dNakFnTFMxeVpYUnllUzFrWld4aGVTQXhNQ0F0TFhKbGRISjVMVzFoZUMxMGFXMWxJRE0yTUNCY0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaUpIdEJVRWxmVlZKTWZYTmhkR1ZzYkdsMFpTMW9aV0ZzZEdndmMyRjBMV2h2YzNRdFkyaGxZMnNpSUMxdklDOTFjM0l2Ykc5allXd3ZZbWx1TDNOaGRDMW9iM04wTFdOb1pXTnJLUW9nSUNBZ0lDQWdJSE5sZENBdGVBb2dJQ0FnSUNBZ0lFaFVWRkJmUWs5RVdUMGtLR1ZqYUc4Z0lpUklWRlJRWDFKRlUxQlBUbE5GSWlCOElITmxaQ0F0UlNBbmN5OUlWRlJRVTFSQlZGVlRYRHBiTUMwNVhYc3pmU1F2THljcENpQWdJQ0FnSUNBZ1NGUlVVRjlUVkVGVVZWTTlKQ2hsWTJodklDSWtTRlJVVUY5U1JWTlFUMDVUUlNJZ2ZDQjBjaUF0WkNBblhHNG5JSHdnWVhkcklDMUdPaUFuTHk0cVNGUlVVRk5VUVZSVlV6b29XekF0T1YxN00zMHBKQzhnZXlCd2NtbHVkQ0FrTWlCOUp5a0tJQ0FnSUNBZ0lDQmxZMmh2SUNJa1NGUlVVRjlDVDBSWklnb2dJQ0FnSUNBZ0lHVmphRzhnSWlSSVZGUlFYMU5VUVZSVlV5SUtJQ0FnSUNBZ0lDQnBaaUJiV3lBaUpFaFVWRkJmVTFSQlZGVlRJaUF0WlhFZ01qQXdJRjFkT3lCMGFHVnVDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmphRzF2WkNBcmVDQXZkWE55TDJ4dlkyRnNMMkpwYmk5ellYUXRhRzl6ZEMxamFHVmphd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwSUN0NENpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFXMWxiM1YwSURWdElDOTFjM0l2Ykc5allXd3ZZbWx1TDNOaGRDMW9iM04wTFdOb1pXTnJJQzB0Y21WbmFXOXVJQ1JTUlVkSlQwNGdMUzFsYm1Sd2IybHVkQ0FrUVZCSlgxVlNUQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlYwSUMxNENpQWdJQ0FnSUNBZ1pXeHpaUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaV05vYnlBaVJYSnliM0lnWkc5M2JteHZZV1JwYm1jZ2FHOXpkQ0JvWldGc2RHZ2dZMmhsWTJzZ2MyTnlhWEIwSUZ0SVZGUlFJSE4wWVhSMWN6b2dKRWhVVkZCZlUxUkJWRlZUWFNJS0lDQWdJQ0FnSUNCbWFRcGxiSE5sQ2lBZ0lDQWdJQ0FnWldOb2J5QWlVMnRwY0hCcGJtY2daRzkzYm14dllXUnBibWNnYUc5emRDQm9aV0ZzZEdnZ1kyaGxZMnNnYzJOeWFYQjBJRnRJVkZSUUlITjBZWFIxY3pvZ0pFaFVWRkJmVTFSQlZGVlRYU0lLWm1rS2MyVjBJQzFsQ25ObGRDQXJlQW9qVTFSRlVDQXpPaUJTUlVkSlUxUkZVaUJJVDFOVUlGUlBJRlJJUlNCSVQxTlVVVlZGVlVVdUlFNUZSVVFnVkU4Z1JWWkJURlZCVkVVZ1NGUlVVQ0JUVkVGVVZWTWdOREE1SUVWWVNWTlVVeXdnTWpBeElHTnlaV0YwWldRdUlFRk1UQ0JQVkVoRlVsTWdSa0ZKVEM0S1NGUlVVRjlTUlZOUVQwNVRSVDBrS0dOMWNtd2dMUzEzY21sMFpTMXZkWFFnSWtoVVZGQlRWRUZVVlZNNkpYdG9kSFJ3WDJOdlpHVjlJaUF0TFhKbGRISjVJREV3TUNBdExYSmxkSEo1TFdSbGJHRjVJREV3SUMwdGNtVjBjbmt0YldGNExYUnBiV1VnTVRnd01DQXRXQ0JRVDFOVUlGd0tJQ0FnSUMxSUlDSllMVUYxZEdndFNHOXpkSEYxWlhWbExVRlFTVXRsZVRvZ0pFaFBVMVJmVVZWRlZVVmZWRTlMUlU0aUlGd0tJQ0FnSUMxSUlDSllMVUYxZEdndFNHOXpkSEYxWlhWbExVRmpZMjkxYm5RNklDUkJRME5QVlU1VVgwbEVJaUJjQ2lBZ0lDQXRTQ0FpUTI5dWRHVnVkQzFVZVhCbE9pQmhjSEJzYVdOaGRHbHZiaTlxYzI5dUlpQmNDaUFnSUNBdFpDQkFMM1J0Y0M5eVpXZHBjM1JsY2k1cWMyOXVJRndLSUNBZ0lDSWtlMEZRU1Y5VVJVMVFYMVZTVEgxMk1pOXRkV3gwYVhOb2FXWjBMMmh2YzNSeGRXVjFaUzlvYjNOMEwzSmxaMmx6ZEdWeUlpa0tjMlYwSUMxNENraFVWRkJmUWs5RVdUMGtLR1ZqYUc4Z0lpUklWRlJRWDFKRlUxQlBUbE5GSWlCOElITmxaQ0F0UlNBbmN5OUlWRlJRVTFSQlZGVlRYRHBiTUMwNVhYc3pmU1F2THljcENraFVWRkJmVTFSQlZGVlRQU1FvWldOb2J5QWlKRWhVVkZCZlVrVlRVRTlPVTBVaUlId2dkSElnTFdRZ0oxeHVKeUI4SUhObFpDQXRSU0FuY3k4dUtraFVWRkJUVkVGVVZWTTZLRnN3TFRsZGV6TjlLU1F2WERFdkp5a0taV05vYnlBaUpFaFVWRkJmUWs5RVdTSUtaV05vYnlBaUpFaFVWRkJmVTFSQlZGVlRJZ3BwWmlCYld5QWlKRWhVVkZCZlUxUkJWRlZUSWlBdGJtVWdNakF4SUYxZE95QjBhR1Z1Q2lBZ0lDQmxZMmh2SUNKRmNuSnZjaUJiU0ZSVVVDQnpkR0YwZFhNNklDUklWRlJRWDFOVVFWUlZVMTBpQ2lBZ0lDQmxlR2wwSURFS1pta0tJMU5VUlZBZ05Eb2dWMEZKVkNCR1QxSWdUVVZOUWtWU1UwaEpVQ0JVVHlCQ1JTQkJVMU5KUjA1RlJBcElUMU5VWDBsRVBTUW9aV05vYnlBaUpFaFVWRkJmUWs5RVdTSWdmQ0JxY1NBdGNpQW5MbWxrSnlrS2QyaHBiR1VnZEhKMVpUc2daRzhLSUNBZ0lITmxkQ0FyWlhnS0lDQWdJRUZUVTBsSFRrMUZUbFE5SkNoamRYSnNJQzB0Y21WMGNua2dNVEF3SUMwdGNtVjBjbmt0WkdWc1lYa2dNVEFnTFMxeVpYUnllUzF0WVhndGRHbHRaU0F4T0RBd0lGd0tJQ0FnSUNBZ0lDQXRTQ0FpV0MxQmRYUm9MVWh2YzNSeGRXVjFaUzFCVUVsTFpYazZJQ1JJVDFOVVgxRlZSVlZGWDFSUFMwVk9JaUJjQ2lBZ0lDQWdJQ0FnTFVnZ0lrTnZiblJsYm5RdFZIbHdaVG9nWVhCd2JHbGpZWFJwYjI0dmVDMTNkM2N0Wm05eWJTMTFjbXhsYm1OdlpHVmtJaUJjQ2lBZ0lDQWdJQ0FnTFMxa1lYUmhMWFZ5YkdWdVkyOWtaU0JvYjNOMGFXUTlJaVJJVDFOVVgwbEVJaUJjQ2lBZ0lDQWdJQ0FnTFMxa1lYUmhMWFZ5YkdWdVkyOWtaU0JzYjJOaGRHbHZibWxrUFNJa1EwOU9WRkpQVEV4RlVsOUpSQ0lnWEFvZ0lDQWdJQ0FnSUMwdFpHRjBZUzExY214bGJtTnZaR1VnWVdOamIzVnVkR2xrUFNJa1FVTkRUMVZPVkY5SlJDSWdYQW9nSUNBZ0lDQWdJQ0lrZTBGUVNWOVZVa3g5TDNOaGRHVnNiR2wwWlM5aGMzTnBaMjRpS1FvZ0lDQWdjMlYwSUMxbGVBb2dJQ0FnYVhOQmMzTnBaMjVsWkQwa0tHVmphRzhnSWlSQlUxTkpSMDVOUlU1VUlpQjhJR3B4SUMxeUlDY3VhWE5CYzNOcFoyNWxaQ2NnZkNCaGQyc2dKM3R3Y21sdWRDQjBiMnh2ZDJWeUtDUXdLWDBuS1FvZ0lDQWdhV1lnVzFzZ0lpUnBjMEZ6YzJsbmJtVmtJaUE5UFNBaWRISjFaU0lnWFYwN0lIUm9aVzRLSUNBZ0lDQWdJQ0JpY21WaGF3b2dJQ0FnWm1rS0lDQWdJR2xtSUZ0YklDSWthWE5CYzNOcFoyNWxaQ0lnSVQwZ0ltWmhiSE5sSWlCZFhUc2dkR2hsYmdvZ0lDQWdJQ0FnSUdWamFHOGdJblZ1Wlhod1pXTjBaV1FnZG1Gc2RXVWdabTl5SUdGemMybG5iaUJ5WlhSeWVXbHVaeUlLSUNBZ0lHWnBDaUFnSUNCemJHVmxjQ0F4TUFwa2IyNWxDbVY0Y0c5eWRDQklUMU5VWDBsRUNpTlRWRVZRSURVNklFRlRVMGxIVGsxRlRsUWdTRUZUSUVKRlJVNGdUVUZFUlM0Z1UwRldSU0JUUTFKSlVGUWdRVTVFSUZKVlRncGxZMmh2SUNJa1FWTlRTVWRPVFVWT1ZDSWdmQ0JxY1NBdGNpQW5Mbk5qY21sd2RDY2dQaTkxYzNJdmJHOWpZV3d2WW1sdUwybGliUzFvYjNOMExXRm5aVzUwTG5Ob0NrRlRVMGxIVGsxRlRsUmZTVVE5SkNobFkyaHZJQ0lrUVZOVFNVZE9UVVZPVkNJZ2ZDQnFjU0F0Y2lBbkxtbGtKeWtLWTJGMElEdzhSVTlHSUQ0dlpYUmpMM05oZEdWc2JHbDBaV1pzWVdkekwybGliUzFvYjNOMExXRm5aVzUwTFhaaGNuTUtaWGh3YjNKMElFaFBVMVJmU1VROUpIdElUMU5VWDBsRWZRcGxlSEJ2Y25RZ1FWTlRTVWRPVFVWT1ZGOUpSRDBrZTBGVFUwbEhUazFGVGxSZlNVUjlDa1ZQUmdwamFHMXZaQ0F3TmpBd0lDOWxkR012YzJGMFpXeHNhWFJsWm14aFozTXZhV0p0TFdodmMzUXRZV2RsYm5RdGRtRnljd3BqYUcxdlpDQXdOekF3SUM5MWMzSXZiRzlqWVd3dlltbHVMMmxpYlMxb2IzTjBMV0ZuWlc1MExuTm9DbU5oZENBOFBFVlBSaUErTDJWMFl5OXplWE4wWlcxa0wzTjVjM1JsYlM5cFltMHRhRzl6ZEMxaFoyVnVkQzV6WlhKMmFXTmxDbHRWYm1sMFhRcEVaWE5qY21sd2RHbHZiajFKUWswZ1NHOXpkQ0JCWjJWdWRDQlRaWEoyYVdObENrRm1kR1Z5UFc1bGRIZHZjbXN1ZEdGeVoyVjBDbHRUWlhKMmFXTmxYUXBGYm5acGNtOXViV1Z1ZEQwaVVFRlVTRDB2ZFhOeUwyeHZZMkZzTDNOaWFXNDZMM1Z6Y2k5c2IyTmhiQzlpYVc0NkwzVnpjaTl6WW1sdU9pOTFjM0l2WW1sdU9pOXpZbWx1T2k5aWFXNGlDa1Y0WldOVGRHRnlkRDB2ZFhOeUwyeHZZMkZzTDJKcGJpOXBZbTB0YUc5emRDMWhaMlZ1ZEM1emFBcFNaWE4wWVhKMFBXOXVMV1poYVd4MWNtVUtVbVZ6ZEdGeWRGTmxZejAxQ2x0SmJuTjBZV3hzWFFwWFlXNTBaV1JDZVQxdGRXeDBhUzExYzJWeUxuUmhjbWRsZEFwRlQwWUtZMmh0YjJRZ01EWTBOQ0F2WlhSakwzTjVjM1JsYldRdmMzbHpkR1Z0TDJsaWJTMW9iM04wTFdGblpXNTBMbk5sY25acFkyVUtjM2x6ZEdWdFkzUnNJR1JoWlcxdmJpMXlaV3h2WVdRS2MzbHpkR1Z0WTNSc0lITjBZWEowSUdsaWJTMW9iM04wTFdGblpXNTBMbk5sY25acFkyVUtkRzkxWTJnZ0lpUklUMU5VWDBGVFUwbEhUbDlHVEVGSElnbz0iCiAgICAgICAgfSwKICAgICAgICAibW9kZSI6IDQ5MwogICAgICB9CiAgICBdCiAgfSwKICAic3lzdGVtZCI6IHsKICAgICJ1bml0cyI6IFsKICAgICAgewogICAgICAgICJjb250ZW50cyI6ICJbVW5pdF1cbkRlc2NyaXB0aW9uPUlCTSBIb3N0IEF0dGFjaCBTZXJ2aWNlXG5XYW50cz1uZXR3b3JrLW9ubGluZS50YXJnZXRcbkFmdGVyPW5ldHdvcmstb25saW5lLnRhcmdldFxuXG5bU2VydmljZV1cbkVudmlyb25tZW50PVwiUEFUSD0vdXNyL2xvY2FsL3NiaW46L3Vzci9sb2NhbC9iaW46L3Vzci9zYmluOi91c3IvYmluOi9zYmluOi9iaW5cIlxuXG5FeGVjU3RhcnQ9L3Vzci9sb2NhbC9iaW4vaWJtLWhvc3QtYXR0YWNoLnNoXG5SZXN0YXJ0PW9uLWZhaWx1cmVcblJlc3RhcnRTZWM9NVxuXG5bSW5zdGFsbF1cbldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0XG5cblxuIiwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgIm5hbWUiOiAiaWJtLWhvc3QtYXR0YWNoLnNlcnZpY2UiCiAgICAgIH0KICAgIF0KICB9Cn0K"
    "guestinfo.ignition.config.data.encoding"  = "base64"
  } 

  customization {
    allow_local_admin_password = true
    auto_generate_password     = false
    admin_password             = "test"
    # Other customization options to override the ones from template
  }
  power_on      = true
}
